name: Build and Release

on:
  push:
    tags:
      - "*"

env:
  MACOS_ZIP: Dolphin_MacOS_${{ github.ref_name }}.zip
  WINDOWS_ZIP: Dolphin_Windows_Setup_${{ github.ref_name }}.zip
  LINUX_ZIP: Dolphin_Linux_${{ github.ref_name }}.zip

jobs:
  build-macos:
    environment: 
        name: release
    runs-on: macos-latest
    

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Install Wails CLI
      run: |
        go install github.com/wailsapp/wails/v2/cmd/wails@latest

    - name: Build for macOS
      run: |
        wails build -platform darwin/universal -ldflags "-X main.Version=${{ github.ref_name }}"

    - name: Zip macOS binary
      run: |
        zip -r ${{ env.MACOS_ZIP }} ./build/bin/Dolphin.app

    - name: Upload macOS zip
      uses: actions/upload-artifact@v4
      with:
        name: Dolphin_MacOS
        path: ${{ env.MACOS_ZIP }}

  build-windows-and-linux:
    environment: 
        name: release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libgtk-3-dev libwebkit2gtk-4.0-dev nsis

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Install Wails CLI
      run: |
        go install github.com/wailsapp/wails/v2/cmd/wails@latest

    - name: Build for Windows/amd64
      run: |
        wails build -platform windows/amd64 -ldflags "-X main.Version=$GITHUB_REF_NAME" --nsis   
        rm ./build/bin/Dolphin.exe
        mv ./build/bin/Dolphin-amd64-installer.exe ./Dolphin_Windows_Amd64-Setup.exe

    - name: Zip Windows amd64 installer
      run: |
        zip -r ${{ env.WINDOWS_ZIP }} ./Dolphin_Windows_Amd64-Setup.exe

    - name: Build for Linux/amd64
      run: |
        wails build -platform linux/amd64 -ldflags "-X main.Version=$GITHUB_REF_NAME"
        mkdir ./Dolphin_Linux_Amd64
        mv ./build/bin ./Dolphin_Linux_Amd64

    - name: Zip Linux amd64 binary
      run: |
        zip -r ${{ env.LINUX_ZIP }} ./Dolphin_Linux_Amd64

    - name: Upload Windows/amd64 zip
      uses: actions/upload-artifact@v4
      with:
        name: Dolphin_Windows_Setup
        path: ${{ env.WINDOWS_ZIP }}

    - name: Upload Linux/amd64 zip
      uses: actions/upload-artifact@v4
      with:
        name: Dolphin_Linux
        path: ${{ env.LINUX_ZIP }}

  create-release:
    environment: 
        name: release
    runs-on: ubuntu-latest
    needs:
      - build-macos
      - build-windows-and-linux

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download macOS zip
      uses: actions/download-artifact@v4
      with:
        name: Dolphin_MacOS
        path: ./artifacts

    - name: Download Windows amd64 zip
      uses: actions/download-artifact@v4
      with:
        name: Dolphin_Windows_Setup
        path: ./artifacts

    - name: Download Linux amd64 zip
      uses: actions/download-artifact@v4
      with:
        name: Dolphin_Linux
        path: ./artifacts

    - name: List files in artifacts directory
      run: ls -R ./artifacts

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ./artifacts/${{ env.MACOS_ZIP }}
          ./artifacts/${{ env.WINDOWS_ZIP }}
          ./artifacts/${{ env.LINUX_ZIP }}
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}